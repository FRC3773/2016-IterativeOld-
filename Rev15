
package org.usfirst.frc.team3773.robot;

import java.io.IOException;

import com.ni.vision.NIVision;
import com.ni.vision.NIVision.Image;

import edu.wpi.first.wpilibj.ADXRS450_Gyro;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.networktables.NetworkTable;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.vision.AxisCamera;

//NOTES FOR PROGRAMMER
//button on smartdashboard that will swap the between the joysticks
//axis camera in camera switcher?

public class Robot extends IterativeRobot {
	//Define the variables that will be used throughout the entire program
    /**
     * CHANNELS
     */
	//TALONS
	final int leftDriveChannel = 0; //Channel for the left drive
	final int rightDriveChannel = 1; //Channel for the right drive
    final int shooterInChannel = 2; //Channel for the shooter intake
    final int shooterOut1Channel = 3; //Channel for the bottom shooter bar
    final int shooterOut2Channel = 4; //Channel for the top shooter bar
    final int armChannel1 = 5; //Channel for the first talon for the arm
    final int armChannel2 = 6; //Channel for the first talon for the arm
	//ANALOG INPUTS
    final int gyroChannel = 0; //Channel for the gyro
    final int ultrasonicChannel = 1; //Channel for the range finder
    //DIGITAL INPUTS
    //final int armLimitTopChannel = 0; //Limit switch for the top of the arm
    //USB (port number on the dashboard)
    final int joystickLeftChannel = 0; //Port number for the left joystick
	final int joystickRightChannel = 1; //Port number for the right joystick
	final int xboxChannel = 2; //Port number for the xbox controller
	
	/**
     * DASHBOARD
     */
	//Define the choices for the smartdashboard
	//Auto mode
	final String defaultAuto = "Default";
    final String portAuto = "Portcullis";
    final String chevalAuto = "Cheval de Frise";
    final String moatAuto = "Moat";
    final String rampAuto = "Ramparts";
    final String drawAuto = "Drawbridge";
    final String sallyAuto = "Sally Port";
    final String rockAuto = "Rock Wall";
    final String roughAuto = "Rough Terrain";
    final String minAuto = "Auto Line";
    final String testAuto = "Test Auto";
    String autoSelected;
    SendableChooser chooser; //Create the chooser for the dashboard
    //Joystick swap
    final String rightStick = "Right Joystick";
    final String leftStick = "Left Joystick";
    String joystickSelected;
    SendableChooser joystickChooser; //Create the chooser for the dashboard
    
    Timer timer = new Timer(); //Create the timer object
    double currTime = timer.get(); //Get the time of the timer
    
	/**
	 * DRIVE
	 */
    Talon LD1 = new Talon(leftDriveChannel); //Create Drive Controllers
	Talon RD1 = new Talon(rightDriveChannel); //Create Drive Controllers
	RobotDrive Drive = new RobotDrive(LD1, RD1); //Create Robot Drive
	
	/**
     * SHOOTER
     */
    Talon shooterOut1 = new Talon(shooterOut1Channel); //Create the middle wheel bar
    Talon shooterOut2 = new Talon(shooterOut2Channel); //Create the top wheel bar
    Talon shooterIn = new Talon(shooterInChannel); //Create the bottom wheel bar
    boolean autoShoot = false; //Is autoShoot in progress?
	
	/**
	 * ARM
	 */
	Talon arm1 = new Talon(armChannel1); //Create the first arm talon
	Talon arm2 = new Talon(armChannel2); //Create the second arm talon
	
	/**
	 * CONTROLS
	 */
	Joystick joystickLeft = new Joystick(joystickLeftChannel); //Create Left Stick
	Joystick joystickRight = new Joystick(joystickRightChannel); //Create Right Stick
	Joystick xboxController = new Joystick(xboxChannel); //Create the xbox controller
	
	/**
	 * ULTRASONIC
	 */
	AnalogInput ultrasonic; //Create the range finder
	final double valueToInches = 102.4; //Factor to convert sensor values to a distance in inches

	/**
	 * CAMERA
	 */
	int session;
	Image frame;
	final String usbCamera = "cam1"; //Name of the USB camera on the roboRIO web dashboard
	//int session2;
	//Image frame2;
	//int currSession;
	//CameraServer server;
	//AxisCamera axis = new AxisCamera("10.37.73.11"); //IP of the axis camera
	
	/**
	 * LIMIT SWITCHES
	 */
	//DigitalInput armLimitTop = new DigitalInput(armLimitTopChannel); //Create the limit switch for the top of the arm
	
	/**
	 * GYRO
	 */
	ADXRS450_Gyro gyro = new ADXRS450_Gyro(); //Create the gyro
	double angleSetpoint = 0.0;
	final double pGain = .006; //propotional turning constant
    final double voltsPerDegreePerSecond = .0128; //Convert volts to degrees
    final double gyroAngle = gyro.getAngle(); //Get the current angle of the gyro

	/**
     * GRIP
     */
    //private final NetworkTable grip = NetworkTable.getTable("grip"); //Create the networktable for grip
	
    public void robotInit() {
    	//Called when the robot is turned on
    	
    	dashboardButtons(); //Create the buttons for the smartdashboard
        ultrasonic = new AnalogInput(ultrasonicChannel); //Create the ultrasonic sensor when robot starts up
        
        //Create the camera(s) and assign the name(s)
        createCam();
        
        //Initalize Grip
        //startGrip();
    }

    public void autonomousInit() {
    	//Called then auto mode is started
    	autoSelected = (String) chooser.getSelected();
		//System.out.println("Auto selected: " + autoSelected);
		timer.start(); //Start the timer
    }

    public void autonomousPeriodic() {
    	//This function is called about every 20ms
    	//Include a gyro to keep the robot straight?
    	//Come up with a system of where the robot should be placed with respect of each of defenses (with an easy/consistent way for the drivers to remember)
    	/*for (double area : grip.getNumberArray("targets/area", new double[0])) {
            System.out.println("Got contour with area=" + area);
        }
        */
        switch(autoSelected) {
    	case portAuto: //NEEDS TESTING
    		//Code to complete the Portcullis
    		
            break;
    	case chevalAuto: //NEEDS TESTING
    		//Code to complete the Cheval de Frise
    		
    		break;
    	case moatAuto: //TIME?
    		//Code to complete the Moat
    		driveAuto(4, -.65);
    		break;
    	case rampAuto: //NEEDS TESTING
    		//Code to complete the Ramparts
    		
    		break;
    	case drawAuto: //NEEDS TESTING
    		//Code to complete the Drawbridge

    		break;
    	case sallyAuto: //NEEDS TESTING
    		//Code to complete the Sallyport
    		 
    		break;
    	case rockAuto: //DONE?
    		//Code to complete the Rock Wall
    		driveAuto(4, -.65); //(time in seconds, speed of motors)
    		break;
    	case roughAuto: //DONE?
    		//Code to complete the Rough Terrain
    		driveAuto(4, -.65); //(time in seconds, speed of motors)
    		break;
    	case minAuto: //DONE?
    		//Code to drive over the auto line at the start of the match
    		driveAuto(2, -.5); //(time in seconds, speed of motors)
    		break;
    	case testAuto: //FOR TESTING AUTO IDEAS
    		//Space to test Auto concepts

    		break;
    	case defaultAuto:
    	default:
    		//The robot does nothing
            break;
    	}
    }

    public void teleopPeriodic() {
    	//This function is called about every 20ms
    	/**
    	 * CONTROL INPUTS
    	 */
        //Drive Joystick
    	double driveStickY = joystickRight.getY();
    	double driveStickX = joystickRight.getX();
    	boolean driveTrigger = joystickRight.getRawButton(1);
    	boolean driveStick2 = joystickRight.getRawButton(2);
        double sens = (-joystickRight.getZ() + 1) / 2.0; //for what?
        //Xbox controller
        boolean xboxA = xboxController.getRawButton(1); //A button
        boolean xboxB = xboxController.getRawButton(2); //B button
        boolean xboxX = xboxController.getRawButton(3); //X button
        boolean xboxY = xboxController.getRawButton(4); //Y button
        boolean xboxRB = xboxController.getRawButton(6); //Right Bumper
        boolean xboxLB = xboxController.getRawButton(5); //Left Bumper
        double xboxLX = xboxController.getRawAxis(0); //Left joystick x-axis
        double xboxLY = xboxController.getRawAxis(1); //Left joystick y-axis
        double xboxRX = xboxController.getRawAxis(4); //Right joystick x-axis
        double xboxRY = xboxController.getRawAxis(5); //Right joystick y-axis
        boolean xboxStart = xboxController.getRawButton(9); //Start button
        double xboxLT = xboxController.getRawAxis(2); //Left trigger //check axis number
        double xboxRT = xboxController.getRawAxis(3); //Right trigger //check axis number
        
        if(Math.abs(xboxLX) <= .25)
			xboxLX = 0.0;
        if(Math.abs(xboxLY) <= .25)
        	xboxLY = 0.0;
        if(Math.abs(xboxRX) <= .25)
        	xboxRX = 0.0;
        if(Math.abs(xboxRY) <= .25)
        	xboxRY = 0.0;

        //Create the arcade drive
        if(driveTrigger == true){
        	//Drive.arcadeDrive(0,0);
        	Drive.arcadeDrive(-(driveStickY*sens), -(driveStickX*sens));
        }
        else{
        	Drive.arcadeDrive((driveStickY*sens), -(driveStickX*sens));
        }
        
        deadZone(xboxLX, xboxLY, xboxRX, xboxRY);
        
        //arm movement
        arm1.set(xboxRY*.5);
        arm2.set(xboxRY*.5);
        
        //arm1.set(xboxLY);
        //arm2.set(xboxLY);
        
        //CHECK THE MOTOR DIRECTIONS!
        //Reset the shooter talons
        shooterOut1.set(0);
        shooterOut2.set(0);
    	shooterIn.set(0.0);
    	
        //Pull the ball into the robot
    	ballIntake(xboxA, xboxB, xboxX, xboxY);
    	
    	//Turn the top and middle shooter wheels
    	shooter(xboxLB, xboxRB);
        
        //Start auto shoot
        /*if(driveStick2  == true && autoShoot == false){
            //Reset the timer for the auto shoot
        	timer.stop(); 
        	timer.reset();
        	timer.start();
        	//Allow the auto shoot to run
        	autoShoot = true;
        	}
        autoShoot = autoShooter(autoShoot);
        */
        //Output data to the smartdashboard
        double currentDistance = (ultrasonic.getVoltage())*(valueToInches); //sensor returns a value from 0-4095 that is scaled to inches
        SmartDashboard.putNumber("Distance", currentDistance);
        SmartDashboard.putNumber("Voltage", ultrasonic.getVoltage());
        //SmartDashboard.putNumber("Gyro", gyro.getAngle());
        SmartDashboard.putBoolean("Auto Shoot", autoShoot);
        SmartDashboard.putBoolean("Start", xboxStart);
        SmartDashboard.putNumber("Timer", currTime);
    }

    //Drive auto mode
    public void driveAuto(double time, double speed){
    	if(timer.get() < time) {
    		Drive.arcadeDrive(speed, 0);
    	}
    	if(timer.get() >= time)
    		Drive.arcadeDrive(0, 0);
    }
    
    //Drive and arm auto mode
    public void armAuto(){
    	
    }
    
    //WILL FIX
    public boolean autoShooter(boolean autoShoot){
    	if(autoShoot == true)
    		if(currTime <= 1)
    			shooterIn.set(-.25);
    		if(currTime <= 2 && currTime > 1){
    			shooterIn.set(0.0);
    			shooterOut1.set(1.0);
    			shooterOut2.set(-1.0);
    			if(currTime > 2){
    				autoShoot = false;
    			}
    		}
    	return autoShoot;
    }
    //Calls the USB camera to be outputted to the dashboard
    public void camera(){
        NIVision.IMAQdxStartAcquisition(session);
        NIVision.IMAQdxGrab(session, frame, 1);
        CameraServer.getInstance().setImage(frame);
        
        //Camera swapping
        /*NIVision.IMAQdxGrab(currSession, frame, 1);
        CameraServer.getInstance().setImage(frame);
        if(xboxController.getRawButton(7)) { //button 2 on joystickRight or Right bumper on the xbox controller swaps the cameras
        	if(currSession == session){
           		  NIVision.IMAQdxStopAcquisition(currSession);
           		  currSession = session2;
    	          NIVision.IMAQdxConfigureGrab(currSession);
     	} 
        	else if(currSession == session2){
         		  NIVision.IMAQdxStopAcquisition(currSession);
           		  currSession = session;
           		  NIVision.IMAQdxConfigureGrab(currSession);
            }
        }
        */
    }
    
    public void createCam(){
    	frame = NIVision.imaqCreateImage(NIVision.ImageType.IMAGE_RGB, 0);
        session = NIVision.IMAQdxOpenCamera(usbCamera, NIVision.IMAQdxCameraControlMode.CameraControlModeController);
        NIVision.IMAQdxConfigureGrab(session);
        //session2 = NIVision.IMAQdxOpenCamera(axisCamera, NIVision.IMAQdxCameraControlMode.CameraControlModeController);
        //currSession = session;
        //NIVision.IMAQdxConfigureGrab(currSession);
    }
    
    public void dashboardButtons(){
    	//Auto mode buttons
    	chooser = new SendableChooser();
        chooser.addDefault("Default Auto", defaultAuto);
        chooser.addObject("Portcullis", portAuto);
        chooser.addObject("Cheval de Frise", chevalAuto);
        chooser.addObject("Moat", moatAuto);
        chooser.addObject("Ramparts", rampAuto);
        chooser.addObject("Drawbridge", drawAuto);
        chooser.addObject("Sally Port", sallyAuto);
        chooser.addObject("Rock Wall", rockAuto);
        chooser.addObject("Rough Terrain", roughAuto);
        chooser.addObject("Auto Line", minAuto);
        chooser.addObject("Test Auto", testAuto);
        SmartDashboard.putData("Auto choices", chooser);
        //Joystick swap (WIP)
        joystickChooser = new SendableChooser();
        joystickChooser.addObject("Right Joystick", rightStick);
        joystickChooser.addObject("Left Joystick", leftStick);
        SmartDashboard.putData("Joystick Choices", joystickChooser);
    }
    
    public void startGrip(){
    	try {
            new ProcessBuilder("/home/lvuser/grip").inheritIO().start();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    //Check all of the code
    /*
    public void driveStraight(){
    	double turningValue;
       	Drive.arcadeDrive(-1.0, -gyroAngle*pGain);
    	((RobotDrive) headingGyro).setSensitivity(voltsPerDegreePerSecond); //calibrates gyro values to equal degrees
        turningValue =  (angleSetpoint - headingGyro.getAngle())*pGain;
        if(joystickRight.getY() <= 0){
        	//forwards
        	Drive.drive(joystickRight.getY(), turningValue); 
        } 
        else{
        	//backwards
            Drive.drive(joystickRight.getY(), -turningValue); 
        }
    }
    */
    
    public void ballIntake(boolean xboxA, boolean xboxB, boolean xboxX, boolean xboxY){
    	//Slow intake in
    	if(xboxA == true){
        	shooterIn.set(.5);
        }
        //Slow intake out
        if(xboxB == true){
        	shooterIn.set(-.5);
        	
        }
        //Fast intake in
        if(xboxX == true){
        	shooterIn.set(1.00);
        }
        //Fast intake out
        if(xboxY == true){
        	shooterIn.set(-1.00);
        }
    }
    
    public void shooter(boolean xboxLB, boolean xboxRB){
    	//Shooter out
        if(xboxRB == true){
        	shooterOut1.set(1.0);
        	shooterOut2.set(-1.0);
        }
        //Shooter in
        if(xboxLB == true){
        	shooterOut1.set(-1.0);
        	shooterOut2.set(1.0);
        }
    }
    
    //check  mult return
    public double deadZone(double xboxLX, double xboxLY, double xboxRX, double xboxRY){
    	if(Math.abs(xboxLX) <= .25)
    			xboxLX = 0.0;
    	if(Math.abs(xboxLY) <= .25)
    		xboxLY = 0.0;
    	if(Math.abs(xboxRX) <= .25)
    		xboxRX = 0.0;
    	if(Math.abs(xboxRY) <= .25)
    		xboxRY = 0.0;
    
    	return xboxLX;
    }
    
    public void testPeriodic() {
    	LiveWindow.run();
    } 

}

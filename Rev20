
package org.usfirst.frc.team3773.robot;

import java.io.IOException;

import com.ni.vision.NIVision;
import com.ni.vision.NIVision.Image;

import edu.wpi.first.wpilibj.ADXRS450_Gyro;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.networktables.NetworkTable;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.vision.AxisCamera;

//IN PROGRESS
//Grip/gyro to center the robot in auto
//Blocks and choices for the shooter auto modes
//Pick the position of the robot in auto mode

public class Robot extends IterativeRobot {
	//Define the variables that will be used throughout the entire program
    /**
     * CHANNELS
     */
	//TALONS
	final int leftDriveChannel = 0; //Channel for the left drive
	final int rightDriveChannel = 1; //Channel for the right drive
    final int shooterInChannel = 2; //Channel for the shooter intake
    final int shooterOut1Channel = 3; //Channel for the bottom shooter bar
    final int shooterOut2Channel = 4; //Channel for the top shooter bar
    final int armChannel1 = 5; //Channel for the first talon for the arm
    final int armChannel2 = 6; //Channel for the first talon for the arm
	//ANALOG INPUTS
    //final int gyroChannel = 0; //Channel for the gyro
    final int infraRedChannel = 0;
    final int ultrasonicChannel = 1; //Channel for the range finder
    //DIGITAL INPUTS
    final int armLimitTopChannel = 2; //Limit switch for the top of the arm
    //USB (port number on the dashboard)
    final int joystickLeftChannel = 0; //Port number for the left joystick
	final int joystickRightChannel = 1; //Port number for the right joystick
	final int xboxChannel = 2; //Port number for the xbox controller
	
	/**
     * DASHBOARD
     */
	//Define the choices for the smartdashboard
	//Position in auto mode
	final String noPosition = "No Position";
	final String firstPosition = "Position 1";
	final String secondPosition = "Position 2";
	final String thirdPosition = "Position 3";
	final String fourthPosition = "Position 4";
	String positionSelected;
	SendableChooser positionChooser;
    int robotOuterWorksPosition = 0; //Create the variable for the position of the robot for the 
	//Auto mode
	final String defaultAuto = "Default";
    final String portAuto = "Portcullis";
    final String chevalAuto = "Cheval de Frise";
    final String moatAuto = "Moat";
    final String rampAuto = "Ramparts";
    final String drawAuto = "Drawbridge";
    final String sallyAuto = "Sally Port";
    final String rockAuto = "Rock Wall";
    final String roughAuto = "Rough Terrain";
    final String minAuto = "Auto Line";
    final String testAuto = "Test Auto";
    String autoSelected;
    SendableChooser chooser; //Create the chooser for the dashboard
    //Auto Set Selection
    final String defaultAutoSet = "Do not shoot";
    final String shooterAutoSet = "Shoot";
    String autoSetSelected;
    SendableChooser autoSetChooser; //Create the chooser for the auto sets for the dashboard
    //Timer
    Timer timer = new Timer(); //Create the timer object
    double currTime = timer.get(); //Get the time of the timer
    
	/**
	 * DRIVE
	 */
    Talon LD1 = new Talon(leftDriveChannel); //Create Drive Controllers
	Talon RD1 = new Talon(rightDriveChannel); //Create Drive Controllers
	RobotDrive Drive = new RobotDrive(LD1, RD1); //Create Robot Drive
	
	/**
     * SHOOTER
     */
    Talon shooterOut1 = new Talon(shooterOut1Channel); //Create the middle wheel bar
    Talon shooterOut2 = new Talon(shooterOut2Channel); //Create the top wheel bar
    Talon shooterIn = new Talon(shooterInChannel); //Create the bottom wheel bar
    boolean autoShoot = false; //Is autoShoot in progress?
    double shooterMult = 1.00;
	
	/**
	 * ARM
	 */
	Talon arm1 = new Talon(armChannel1); //Create the first arm talon
	Talon arm2 = new Talon(armChannel2); //Create the second arm talon
	
	/**
	 * CONTROLS
	 */
	Joystick joystickLeft = new Joystick(joystickLeftChannel); //Create Left Stick
	Joystick joystickRight = new Joystick(joystickRightChannel); //Create Right Stick
	Joystick xboxController = new Joystick(xboxChannel); //Create the xbox controller
	
	/**
	 * ULTRASONIC
	 */
	AnalogInput ultrasonic; //Create the range finder
	final double valueToInches = 102.4; //Factor to convert sensor values to a distance in inches

	/**
	 * CAMERA
	 */
	int session;
	Image frame;
	int session2;
	Image frame2;
	int currSession;
	CameraServer server;
	//AxisCamera axis = new AxisCamera("10.37.73.11"); //IP of the axis camera
	
	/**
	 * LIMIT SWITCHES
	 */
	//DigitalInput armLimitTop = new DigitalInput(armLimitTopChannel); //Create the limit switch for the top of the arm
	AnalogInput infraRed = new AnalogInput(infraRedChannel);
	
	/**
	 * GYRO
	 */
	/*ADXRS450_Gyro gyro = new ADXRS450_Gyro(); //Create the gyro
	double angleSetpoint = 0.0;
	final double pGain = .006; //propotional turning constant
    final double voltsPerDegreePerSecond = .0128; //Convert volts to degrees
    final double gyroAngle = gyro.getAngle(); //Get the current angle of the gyro
	*/
	/**
     * GRIP
     */
    //private final NetworkTable grip = NetworkTable.getTable("grip"); //Create the networktable for grip
	
    public void robotInit() {
    	//Called when the robot is turned on
    	
    	dashboardButtons(); //Create the buttons for the smartdashboard
        ultrasonic = new AnalogInput(ultrasonicChannel); //Create the ultrasonic sensor when robot starts up
        
        //Create the camera(s) and assign the name(s)
        //createCam();
        //camera
        frame = NIVision.imaqCreateImage(NIVision.ImageType.IMAGE_RGB, 0);

        // the camera name (ex "cam0") can be found through the roborio web interface
        session = NIVision.IMAQdxOpenCamera("cam1",
                NIVision.IMAQdxCameraControlMode.CameraControlModeController);
        //NIVision.IMAQdxConfigureGrab(session);
        
        session2 = NIVision.IMAQdxOpenCamera("cam2",
                NIVision.IMAQdxCameraControlMode.CameraControlModeController);
        //NIVision.IMAQdxConfigureGrab(session2);
        currSession = session;
        NIVision.IMAQdxConfigureGrab(currSession);
        
        //Initalize Grip
        //startGrip();
    }

    public void autonomousInit() {
    	//Called then auto mode is started
    	autoSelected = (String) chooser.getSelected();
		timer.start(); //Start the timer
    }

    public void autonomousPeriodic() {
    	//This function is called about every 20ms
    	/*for (double area : grip.getNumberArray("targets/area", new double[0])) {
            System.out.println("Got contour with area=" + area);
        }*/
        double currentDistance = (ultrasonic.getVoltage())*(valueToInches); //sensor returns a value from 0-4095 that is scaled to inches
    	//Normal Auto Modes
    	switch(autoSetSelected){
    	case defaultAutoSet:
    		//Do nothing if the normal set is selected and ignore the position number
    		break;
    	case shooterAutoSet:
    		switch(positionSelected){
    		case noPosition:
    			robotOuterWorksPosition = 0;
    			break;
    		case firstPosition: 
    			robotOuterWorksPosition = 1;
    			break;
    		case secondPosition:
    			robotOuterWorksPosition = 2;
    			break;
    		case thirdPosition:
    			robotOuterWorksPosition = 3;
    			break;
    		case fourthPosition:
    			robotOuterWorksPosition = 4;
    			break;
    		}
    		break;
    	}
    	
        switch(autoSelected) {
    	case portAuto: //NEEDS TESTING
    		//Code to complete the Portcullis

            break;
    	case chevalAuto: //NEEDS TESTING
    		//Code to complete the Cheval de Frise
    		
    		break;
    	case moatAuto: //TIME?
    		//Code to complete the Moat
    		driveAuto(2, -.65); //(time in seconds, speed of motors)
    		break;
    	case rampAuto: //NEEDS TESTING
    		//Code to complete the Ramparts
    		driveAuto(2, -.85);
    		break;
    	case drawAuto: //NEEDS TESTING
    		//Code to complete the Drawbridge

    		break;
    	case sallyAuto: //NEEDS TESTING
    		//Code to complete the Sallyport
    		 
    		break;
    	case rockAuto: //NEEDS TESTING
    		//Code to complete the Rock Wall
    		driveAuto(2.5, -.85); //(time in seconds, speed of motors)
    		break;
    	case roughAuto: //NEEDS TESTING
    		//Code to complete the Rough Terrain
    		driveAuto(2.5, -.65); //(time in seconds, speed of motors)
    		break;
    	case minAuto: //NEEDS TESTING
    		//Code to drive over the auto line at the start of the match
    		driveAuto(1, -.5); //(time in seconds, speed of motors)
    		break;
    	case testAuto: //FOR TESTING AUTO IDEAS
    		//Space to test Auto concepts
    		//(int position, double timeToCross, double powerToCross, double timeToCenter, double currentDistance)
    		diveShooterAuto(robotOuterWorksPosition, 2, -.85, 0, currentDistance);
    		break;
    	case defaultAuto:
    	default:
    		//The robot does nothing
            break;
    	}
        
        
    }

    public void teleopPeriodic() {
    	//This function is called about every 20ms
    	/**
    	 * CONTROL INPUTS
    	 */
        //Drive Joystick
    	double driveStickY = joystickRight.getY();
    	double driveStickX = joystickRight.getX();
    	boolean driveTrigger = joystickRight.getRawButton(1);
    	boolean driveStick2 = joystickRight.getRawButton(2); //Button 2 on the driveJoystick
    	boolean driveStick3 = joystickRight.getRawButton(3);
    	boolean driveStick6 = joystickRight.getRawButton(6);
    	boolean driveStick7 = joystickRight.getRawButton(7);
    	boolean driveStick11 = joystickRight.getRawButton(11);
    	boolean driveStick10 = joystickRight.getRawButton(10);
    	
        double sens = (-joystickRight.getZ() + 1) / 2.0; //Sets the sensitivity of the drive joystick
        //Xbox controller
        boolean xboxA = xboxController.getRawButton(1); //A button
        boolean xboxB = xboxController.getRawButton(2); //B button
        boolean xboxX = xboxController.getRawButton(3); //X button
        boolean xboxY = xboxController.getRawButton(4); //Y button
        boolean xboxRB = xboxController.getRawButton(6); //Right Bumper
        boolean xboxLB = xboxController.getRawButton(5); //Left Bumper
        double xboxLX = xboxController.getRawAxis(0); //Left joystick x-axis
        double xboxLY = xboxController.getRawAxis(1); //Left joystick y-axis
        double xboxRX = xboxController.getRawAxis(4); //Right joystick x-axis
        double xboxRY = xboxController.getRawAxis(5); //Right joystick y-axis
        boolean xboxStart = xboxController.getRawButton(9); //Start button
        double xboxLT = xboxController.getRawAxis(2); //Left trigger //check axis number
        double xboxRT = xboxController.getRawAxis(3); //Right trigger //check axis number
        
        //Reset the shooter talons
        shooterOut1.set(0);
        shooterOut2.set(0);
    	shooterIn.set(0.0);
        
    	//TEST
    	if(driveStick6 == true || driveStick7 == true || driveStick11 == true || driveStick10 == true){
        if(driveStick6 == true)
        	shooterOut1.set(-.95);
			shooterOut2.set(.95);
        if(driveStick7 == true)
        	shooterOut1.set(-.90);
			shooterOut2.set(.90);
        if(driveStick11 == true)
        	shooterOut1.set(-.85);
			shooterOut2.set(.85);
        if(driveStick10 == true)
        	shooterOut1.set(-.80);
			shooterOut2.set(.80);
    	}
        
        //Deadzone for xbox controller
        if(Math.abs(xboxLX) <= .25)
			xboxLX = 0.0;
        if(Math.abs(xboxLY) <= .25)
        	xboxLY = 0.0;
        if(Math.abs(xboxRX) <= .25)
        	xboxRX = 0.0;
        if(Math.abs(xboxRY) <= .25)
        	xboxRY = 0.0;

        //Create the arcade drive
        if(driveTrigger == true)
        	Drive.arcadeDrive(-(driveStickY*sens), -(driveStickX*sens));
        else
        	Drive.arcadeDrive((driveStickY*sens), -(driveStickX*sens));
        
        //arm movement
        double armMoveValue = armMovement(xboxLY, xboxRY);
        arm1.set(armMoveValue);
        arm2.set(armMoveValue);
    	
        //Pull the ball into the robot
    	ballIntake(xboxA, xboxB, xboxX, xboxY);
    	
    	//Turn the top and middle shooter wheels
    	shooter(xboxLB, xboxRB);
    	
    	NIVision.IMAQdxGrab(currSession, frame, 1);
        CameraServer.getInstance().setImage(frame);
        if(driveStick3 == true)
            if(currSession == session){
           		  NIVision.IMAQdxStopAcquisition(currSession);
           		  currSession = session2;
    	          NIVision.IMAQdxConfigureGrab(currSession);
     	} else if(currSession == session2){
          		  NIVision.IMAQdxStopAcquisition(currSession);
           		  currSession = session;
           		  NIVision.IMAQdxConfigureGrab(currSession);
            }
        
    	//Limit switch for the arm
    	//armLimit(xboxLY, xboxRY);
    	
        //Start auto shoot
        /*if(driveStick2  == true && autoShoot == false){
            //Reset the timer for the auto shoot
        	timer.stop();
        	timer.reset();
        	timer.start();
        	//Allow the auto shoot to run
        	autoShoot = true;
        	}
        autoShoot = autoShooter(autoShoot);
        */
        //Output data to the smartdashboard
        double currentDistance = (ultrasonic.getVoltage())*(valueToInches); //sensor returns a value from 0-4095 that is scaled to inches
        SmartDashboard.putNumber("Distance Graph", currentDistance);
        SmartDashboard.putNumber("Distance", currentDistance);
        SmartDashboard.putNumber("Voltage", ultrasonic.getVoltage());
        //SmartDashboard.putNumber("Gyro", gyro.getAngle());
        SmartDashboard.putBoolean("Auto Shoot", autoShoot);
        SmartDashboard.putBoolean("Start", xboxStart);
        SmartDashboard.putNumber("Timer", currTime);
        SmartDashboard.putNumber("Arm Value", armMoveValue);
        SmartDashboard.putBoolean("3", joystickRight.getRawButton(3));
        //SmartDashboard.putNumber("Percent Mult", shooterMult);
        SmartDashboard.putNumber("IRED SENSOR VOLTAGE", infraRed.getVoltage());
    }
    //Drive auto mode
    public void driveAuto(double time, double speed){
    	if(timer.get() < time)
    		Drive.arcadeDrive(speed, 0);
    	if(timer.get() >= time)
    		Drive.arcadeDrive(0, 0);
    }
    //Drive and arm auto mode
    public void armAuto(double timeDrive, double speedDrive, double timeArm, double speedArm){
    	
    }
    //WILL FIX
    //Shoots the ball automatically
    public boolean autoShooter(boolean autoShoot){
    	if(autoShoot == true)
    		if(currTime <= 1)
    			shooterIn.set(-.25);
    		if(currTime <= 2 && currTime > 1){
    			shooterIn.set(0.0);
    			shooterOut1.set(1.0);
    			shooterOut2.set(-1.0);
    			if(currTime > 2){
    				autoShoot = false;
    			}
    		}
    	return autoShoot;
    }
    //Creates the cameras and assigns the names

    //creates and assigns buttons for the smartdashboard
    public void dashboardButtons(){
    	//Normal Auto mode buttons
    	chooser = new SendableChooser();
        chooser.addDefault("Default Auto", defaultAuto);
        chooser.addObject("Portcullis", portAuto);
        chooser.addObject("Cheval de Frise", chevalAuto);
        chooser.addObject("Moat", moatAuto);
        chooser.addObject("Ramparts", rampAuto);
        chooser.addObject("Drawbridge", drawAuto);
        chooser.addObject("Sally Port", sallyAuto);
        chooser.addObject("Rock Wall", rockAuto);
        chooser.addObject("Rough Terrain", roughAuto);
        chooser.addObject("Auto Line", minAuto);
        chooser.addObject("Test Auto", testAuto);
        SmartDashboard.putData("Auto choices", chooser);
        //Shooter Auto mode buttons
        autoSetChooser = new SendableChooser();
        autoSetChooser.addDefault("Do not shoot", defaultAutoSet);
        autoSetChooser.addObject("Shoot", shooterAutoSet);
        //Robot for auto
        positionChooser.addDefault("No Position", noPosition);
        positionChooser.addObject("First Position", firstPosition);
        positionChooser.addObject("Second Position", secondPosition);
        positionChooser.addObject("Third Position", thirdPosition);
        positionChooser.addObject("Fourth Position", fourthPosition);
        
    }
    //Starts grip
    public void startGrip(){
    	try {
            new ProcessBuilder("/home/lvuser/grip").inheritIO().start();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    //Check all of the code
    /*
    public void driveStraight(){
    	double turningValue;
       	Drive.arcadeDrive(-1.0, -gyroAngle*pGain);
    	((RobotDrive) headingGyro).setSensitivity(voltsPerDegreePerSecond); //calibrates gyro values to equal degrees
        turningValue =  (angleSetpoint - headingGyro.getAngle())*pGain;
        if(joystickRight.getY() <= 0){
        	//forwards
        	Drive.drive(joystickRight.getY(), turningValue); 
        } 
        else{
        	//backwards
            Drive.drive(joystickRight.getY(), -turningValue); 
        }
    }
    */
    //Rotates the bottom wheel bar
    public void ballIntake(boolean xboxA, boolean xboxB, boolean xboxX, boolean xboxY){
    	//Slow intake in
    	if(xboxA == true)
        	shooterIn.set(.5);
        //Slow intake out
        if(xboxB == true)
        	shooterIn.set(-.5);
        //Fast intake in
        if(xboxX == true)
        	shooterIn.set(1.00);
        //Fast intake out
        if(xboxY == true)
        	shooterIn.set(-1.00);
    }
    
    //Controls the top two wheel bar in opposite directions
    public void shooter(boolean xboxLB, boolean xboxRB){
    	//Shooter out
        if(xboxRB == true){
        	shooterOut1.set(1.0);
        	shooterOut2.set(-1.0);
        }
        //Shooter in
        if(xboxLB == true){
        	shooterOut1.set(-1.0);
        	shooterOut2.set(1.0);
        }
    }
    //Moves the arm with the left and right axis on the xbox controller    
    public double armMovement(double xboxLY, double xboxRY){
    	//arm movement
        double xboxY = 0;
        if(xboxRY != 0)
        	xboxY = xboxRY*.5;      
        if(xboxLY != 0)
        	xboxY = xboxLY;
        
        return xboxY;
    }
    
    public void diveShooterAuto(int position, double timeToCross, double powerToCross, double timeToCenter, double currentDistance){
		if(position != 0){ //If shooter mode is selected and a position has been set
			double SHOOTER_DISTANCE = 100;
			if(position == 1){
				
			}
			if(position == 2){
				
			}
			if(position == 3){
				driveAuto(timeToCross, powerToCross);
				if(SHOOTER_DISTANCE > currentDistance){
					Drive.arcadeDrive(-.5 ,0);
				}
			}
			if(position == 4){
				
			}
		}
    }
    
    public void testPeriodic() {
    	LiveWindow.run();
    } 

}

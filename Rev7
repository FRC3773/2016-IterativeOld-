package org.usfirst.frc.team3773.robot;

import com.ni.vision.NIVision;
import com.ni.vision.NIVision.Image;
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.interfaces.Gyro;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;

public class Robot extends IterativeRobot {
    /**
     * CHANNELS
     */
	final int ultrasonicChannel = 3; //analog input pint
	final int leftDriveChannel = 0;
	final int rightDriveChannel = 1;
    final int gyroChannel = 0; //analog input
	
	/**
     * AUTO MODE
     */
	//Auto Mode Choice Creations
	final String defaultAuto = "Default";
    final String portAuto = "Portcullis";
    final String chevalAuto = "Cheval de Frise";
    final String moatAuto = "Moat";
    final String rampAuto = "Ramparts";
    final String drawAuto = "Drawbridge";
    final String sallyAuto = "Sally Port";
    final String rockAuto = "Rock Wall";
    final String roughAuto = "Rough Terrain";
    final String minAuto = "Auto Line";
    final String testAuto = "Test Auto";
    //final String lowAuto = "Low Bar"; //Uncomment for the low bar auto
    String autoSelected;
    SendableChooser chooser;
    //Clock variables for auto mode
    Timer timer = new Timer(); //Create a timer for auto mode
	    
	/**
	 * DRIVE
	 */
    //Check the Talon channels on new robo drive
    Talon LD1 = new Talon(leftDriveChannel); //Create Drive Controllers
	Talon RD1 = new Talon(rightDriveChannel); //Create Drive Controllers
	RobotDrive Drive = new RobotDrive(LD1, RD1); //Create Robot Drive
	
	/**
	 * CONTROLS
	 */
	final int joystickChannelL = 0;
	final int joystickChannelR = 1;
	final int xboxChannel = 2;
	Joystick DJ = new Joystick(joystickChannelL); //Create Drive Stick
	Joystick xboxController = new Joystick(xboxChannel);
	
	/**
	 * ULTRASONIC
	 */
	AnalogInput ultrasonic; //create the ultrasonic sensor
	final double valueToInches = 0.125; //factor to convert sensor values to a distance in inches
	final String distance = "Distance";
	final String voltage = "Voltage";

	/**
	 * CAMERA
	 */
	int session;
	Image frame;
    //the camera name can be found in the roborio web dashboard
	final String usbCamera = "cam0";
	
	/**
	 * GYRO
	 */
	//Gyro gyro;
	double angleSetpoint = 0.0;
    final double pGain = .006; //propotional turning constant
    //gyro calibration constant, may need to be adjusted; 
    //gyro value of 360 is set to correspond to one full revolution
    final double voltsPerDegreePerSecond = .0128;
    Gyro headingGyro = new AnalogGyro(gyroChannel);
    double heading = headingGyro.getAngle();

    /**
     * SHOOTER
     */
    //change the channels to the motor controllers
    final int shooterOut1Channel = 4; 
    final int shooterOut2Channel = 4;
    final int shooterInChannel = 4;
    Talon shooterOut1 = new Talon(shooterOut1Channel);
    Talon shooterOut2 = new Talon(shooterOut2Channel);
    Talon shooterIn = new Talon(shooterInChannel);
	
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
        //auto choices
    	chooser = new SendableChooser();
        chooser.addDefault("Default Auto", defaultAuto);
        chooser.addObject("Portcullis", portAuto);
        chooser.addObject("Cheval de Frise", chevalAuto);
        chooser.addObject("Moat", moatAuto);
        chooser.addObject("Ramparts", rampAuto);
        chooser.addObject("Drawbridge", drawAuto);
        chooser.addObject("Sally Port", sallyAuto);
        chooser.addObject("Rock Wall", rockAuto);
        chooser.addObject("Rough Terrain", roughAuto);
        chooser.addObject("Auto Line", minAuto);
        chooser.addObject("Test Auto", testAuto);
        SmartDashboard.putData("Auto choices", chooser);
        
        //Create the ultrasonic sensor when robot starts up
        ultrasonic = new AnalogInput(ultrasonicChannel);
        
        //Create the camera and assign the name
        frame = NIVision.imaqCreateImage(NIVision.ImageType.IMAGE_RGB, 0);
        session = NIVision.IMAQdxOpenCamera(usbCamera, NIVision.IMAQdxCameraControlMode.CameraControlModeController);
        NIVision.IMAQdxConfigureGrab(session);
    }
    
	/**
	 * This autonomous (along with the chooser code above) shows how to select between different autonomous modes
	 * using the dashboard. The sendable chooser code works with the Java SmartDashboard. If you prefer the LabVIEW
	 * Dashboard, remove all of the chooser code and uncomment the getString line to get the auto name from the text box
	 * below the Gyro
	 *
	 * You can add additional auto modes by adding additional comparisons to the switch structure below with additional strings.
	 * If using the SendableChooser make sure to add them to the chooser code above as well.
	 */
    public void autonomousInit() {
    	autoSelected = (String) chooser.getSelected();
//		autoSelected = SmartDashboard.getString("Auto Selector", defaultAuto);
		System.out.println("Auto selected: " + autoSelected);
		timer.start();
		SmartDashboard.putNumber("Time", timer.get());
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
    	//Include a gyro to keep the robot straight?
    	//Come up with a system of where the robot should be placed with respect of each of defenses (with an easy/consistent way for the drivers to remember)
    	switch(autoSelected) {
    	case portAuto: //NEEDS TESTING
    		//Code to complete the Portcullis
    		//Needs to lift the gate and drive underneath it
    		
            break;
    	case chevalAuto: //NEEDS TESTING
    		//Code to complete the Cheval de Frise
    		//Needs to push down one of the staggered ramps and dive over (with wheels/an arm)
    		
    		break;
    	case moatAuto: //NEEDS TESTING
    		//Code to complete the Moat
    		//Run at full speed over the Moat(?)
    		while (timer.get() < 5) {
        		Drive.arcadeDrive(.5, 0);
        	}
        	if(timer.get() > 5)
        		Drive.arcadeDrive(0, 0);
        		timer.stop();
    		break;
    	case rampAuto: //NEEDS TESTING
    		//Code to complete the Ramparts
    		//Needs to drive over 2 opposite inclined planes (drive at and angle/head on)?
    		
    		break;
    	case drawAuto: //NEEDS TESTING
    		//Code to complete the Drawbridge
    		//Needs to use an arm(?) to push down the gate and drive over
    		
    		break;
    	case sallyAuto: //NEEDS TESTING
    		//Code to complete the Sallyport
    		//Needs to use and arm(?) to pull the gate towards itself and drive inside
    		 
    		break;
    	case rockAuto: //NEEDS TESTING
    		//Code to complete the Rock Wall
    		//Run at full speed over the Rock Wall(?)
    		while (timer.get() < 5) {
        		Drive.arcadeDrive(.5, 0);
        	}
        	if(timer.get() > 5)
        		Drive.arcadeDrive(0, 0);
        		timer.stop();
    		break;
    	case roughAuto: //NEEDS TESTING
    		//Code to complete the Rough Terrain
    		//Run at full speed over the Rough Terrain(?)
    		
    		break;
    	case minAuto: //NEEDS TESTING
    		//Code to drive over the auto line at the start of the match
    		//Needs to drive forward and reach a defense (how far?)
    		//Auto line: a 2in wide line of green gaffers tape that is 12in from the edge of the mid line
    		while (timer.get() < 5) {
        		Drive.arcadeDrive(.5, 0);
        	}
        	if(timer.get() > 5)
        		Drive.arcadeDrive(0, 0);
        		timer.stop();
    		break;
    	case testAuto: //FOR TESTING AUTO IDEAS
    		//Space to test Auto concepts
        	while (timer.get() < 5) {
        		Drive.arcadeDrive(.5, 0);
        	}
        	if(timer.get() > 5)
        		Drive.arcadeDrive(0, 0);
        		timer.stop();
    		break;
    	case defaultAuto:
    	default:
    		//The robot does nothing
            break;
    	}
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        //Create the X and Y axis for the driver joystick
    	double DY = DJ.getY();
        double DX = DJ.getX();
        
        //Create the arcade drive
        Drive.arcadeDrive(DY, -DX);
        
        //create xbox buttons
        boolean xboxA = xboxController.getRawButton(1);
        boolean xboxB = xboxController.getRawButton(2);
        boolean xboxX = xboxController.getRawButton(3);
        boolean xboxY = xboxController.getRawButton(4);
        
        //sooter intake
        while(xboxA == true){
        	shooterIn.set(1.0);
        }
        if(xboxA == false)
        	shooterIn.set(0.0);
        //reverse the shooter
        while(xboxY == true){
        	shooterIn.set(-1.0);
        }
        if(xboxY == false)
        	shooterIn.set(0.0);

        
        //Call the camera
        NIVision.IMAQdxStartAcquisition(session);
        NIVision.IMAQdxGrab(session, frame, 1);
        CameraServer.getInstance().setImage(frame);
        
        //double currentSpeed; //speed set to the drive train motors
        double currentDistance; //distance measured from ultrasonic sendor
        
        double turningValue;
    	((RobotDrive) headingGyro).setSensitivity(voltsPerDegreePerSecond); //calibrates gyro values to equal degrees
        turningValue =  (angleSetpoint - headingGyro.getAngle())*pGain;
        if(DJ.getY() <= 0){
        //forwards
        Drive.drive(DJ.getY(), turningValue); 
        } 
        else{
        	//backwards
            Drive.drive(DJ.getY(), -turningValue); 
        }
        
        currentDistance = ultrasonic.getVoltage()*valueToInches; //sensor returns a value from 0-4095 that is scaled to inches
        
        SmartDashboard.putNumber(distance, currentDistance);
        SmartDashboard.putNumber(voltage, ultrasonic.getVoltage());
        
            }
    
    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
    
    } 
}

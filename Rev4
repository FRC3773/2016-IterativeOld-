package org.usfirst.frc.team3773.robot;

import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {
    /**
     * AUTO MODE
     */
	//Auto Mode Choice Creations
	final String defaultAuto = "Default";
    final String portAuto = "Portcullis";
    final String chevalAuto = "Cheval de Frise";
    final String moatAuto = "Moat";
    final String rampAuto = "Ramparts";
    final String drawAuto = "Drawbridge";
    final String sallyAuto = "Sally Port";
    final String rockAuto = "Rock Wall";
    final String roughAuto = "Rough Terrain";
    final String minAuto = "Auto Line";
    final String testAuto = "Test Auto";
    //final String lowAuto = "Low Bar"; //Uncomment for the low bar auto
    String autoSelected;
    SendableChooser chooser;
    //Clock variables for auto mode
    Timer timer = new Timer(); //Create a timer for auto mode
	double ti = 0;
	    
	/**
	 * DRIVE
	 */
    //Check the Talon channels on new robo
    Talon LD1 = new Talon(0); //Create Drive Controllers
	Talon RD1 = new Talon(1); //Create Drive Controllers
	RobotDrive Drive = new RobotDrive(LD1, RD1); //Create Robot Drive
	
	/**
	 * CONTROLS
	 */
	Joystick DJ = new Joystick(1); //Create Drive Stick
	
	/**
	 * ULTRASONIC
	 */
	AnalogInput ultrasonic; //create the ultrasonic sensor
	final int ultrasonicChannel = 3; //analog input pint
	final double valueToInches = 0.125; //factor to convert sensor values to a distance in inches
	final String distance = "Distance";
	final String voltage = "Voltage";


	
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
        //auto choices
    	chooser = new SendableChooser();
        chooser.addDefault("Default Auto", defaultAuto);
        chooser.addObject("Portcullis", portAuto);
        chooser.addObject("Cheval de Frise", chevalAuto);
        chooser.addObject("Moat", moatAuto);
        chooser.addObject("Ramparts", rampAuto);
        chooser.addObject("Drawbridge", drawAuto);
        chooser.addObject("Sally Port", sallyAuto);
        chooser.addObject("Rock Wall", rockAuto);
        chooser.addObject("Rough Terrain", roughAuto);
        chooser.addObject("Auto Line", minAuto);
        chooser.addObject("Test Auto", testAuto);
        //chooser.addObject("Low Bar", lowAuto);
        SmartDashboard.putData("Auto choices", chooser);
        
        //Create the ultrasonic sensor when robot starts up
        ultrasonic = new AnalogInput(ultrasonicChannel);        

    }
    
	/**
	 * This autonomous (along with the chooser code above) shows how to select between different autonomous modes
	 * using the dashboard. The sendable chooser code works with the Java SmartDashboard. If you prefer the LabVIEW
	 * Dashboard, remove all of the chooser code and uncomment the getString line to get the auto name from the text box
	 * below the Gyro
	 *
	 * You can add additional auto modes by adding additional comparisons to the switch structure below with additional strings.
	 * If using the SendableChooser make sure to add them to the chooser code above as well.
	 */
    public void autonomousInit() {
    	autoSelected = (String) chooser.getSelected();
//		autoSelected = SmartDashboard.getString("Auto Selector", defaultAuto);
		System.out.println("Auto selected: " + autoSelected);
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
    	//Include a gyro to keep the robot straight?
    	//Come up with a system of where the robot should be placed with respect of each of defenses (with an easy/consistent way for the drivers to remember)
    	switch(autoSelected) {
    	case portAuto: //NEEDS TESTING
    		//Code to complete the Portcullis
    		//Needs to lift the gate and drive underneath it
    		
            break;
    	case chevalAuto: //NEEDS TESTING
    		//Code to complete the Cheval de Frise
    		//Needs to push down one of the staggered ramps and dive over (with wheels/an arm)
    		
    		break;
    	case moatAuto: //NEEDS TESTING
    		//Code to complete the Moat
    		//Run at full speed over the Moat(?)
    		
    		break;
    	case rampAuto: //NEEDS TESTING
    		//Code to complete the Ramparts
    		//Needs to drive over 2 opposite inclined planes (drive at and angle/head on)?
    		
    		break;
    	case drawAuto: //NEEDS TESTING
    		//Code to complete the Drawbridge
    		//Needs to use an arm(?) to push down the gate and drive over
    		
    		break;
    	case sallyAuto: //NEEDS TESTING
    		//Code to complete the Sallyport
    		//Needs to use and arm(?) to pull the gate towards itself and drive inside
    		 
    		break;
    	case rockAuto: //NEEDS TESTING
    		//Code to complete the Rock Wall
    		//Run at full speed over the Rock Wall(?)
    		
    		break;
    	case roughAuto: //NEEDS TESTING
    		//Code to complete the Rough Terrain
    		//Run at full speed over the Rough Terrain(?)
    		
    		break;
    	case minAuto: //NEEDS TESTING
    		//Code to drive over the auto line at the start of the match
    		//Needs to drive forward and reach a defense (how far?)
    		//Auto line: a 2in wide line of green gaffers tape that is 12in from the edge of the mid line
    		
    		break;
    	case testAuto: //FOR TESTING AUTO IDEAS
    		//Space to test Auto concepts
    		timer.start();
        	while (timer.hasPeriodPassed(5) == false) {
        		Drive.arcadeDrive(.5, 0);
        	}
        	//timer.stop();
        	Drive.arcadeDrive(0, 0);
    		break;
    	//case lowAuto: //NEEDS TESTING
    		//Code to complete the low bar
    		//break;
    	case defaultAuto:
    	default:
    		//The robot does nothing
            break;
            
        
    	}
    	Drive.arcadeDrive(0, 0);
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        //Create the X and Y axis for the driver joystick
    	double DY = DJ.getY();
        double DX = DJ.getX();
        
        //Create the arcade drive
        Drive.arcadeDrive(DY, -DX);
        
        //double currentSpeed; //speed set to the drive train motors
        double currentDistance; //distance measured from ultrasonic sendor
        
        currentDistance = ultrasonic.getVoltage()*valueToInches; //sensor returns a value from 0-4095 that is scaled to inches
        //currentSpeed = (holdDistance - currentDistance)*pGain; 
        //convert distance to a motor speed
        //myRobot.drive(currentSpeed, 0); //drive robot
        
        SmartDashboard.putNumber(distance, currentDistance);
        SmartDashboard.putNumber(voltage, ultrasonic.getVoltage());
        
    }
    
    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
    
    } 
}
